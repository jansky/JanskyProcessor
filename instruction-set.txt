Instruction	Assembly	Description					Operands			
----------------------------------------------------------------------------------------
00		HLT		Halt						None
01		RST		Restart Execution				None
02		CLR		Clear all registers				None
03		INT		Call interrupt					BYTE [Interrupt Number]
04		EXE		Execute code at RAM location			DWORD [Begin RAM location], DWORD [End RAM location]
05		PUT		Put value in register or RAM			DWORD [Value], DWORD [Location]
06		CPY		Copies values					DWORD [Location of value to be copied], DWORD [Destination]
07		ADD		Add values					DWORD [Location of value 1], DWORD [Location of value 2]
08		SUB		Subtract values					DWORD [Location of value 1], DWORD [Location of value 2]
09		MUL		Multiply values					DWORD [Location of value 1], DWORD [Location of value 2]
0A		DIV		Divide values					DWORD [Location of value 1], DWORD [Location of value 2]
0B		PUSH		Push value onto stack				DWORD [Location of value]
0C		POP		Pop value off of stack				DWORD [Location]
0D		PUSHA		Push values of all registers onto stack		None
0E		POPA		Pop values of registers off stack		None
0F		JMP		Jump to location				DWORD [Location]
10		CMP		Compare values			
11		RET			Return to previous code				None (ret location in bp)
12		JMPC		Conditional jump
13		JMPR		Jump and set RET value
14 		JMPRC		Conditional jump and set RET value
15		IRET		Return from interrupt



Register	Assembly	Description
-------------------------------------------
00		ar1		Integer Arithmetic Register 1
01		ar2		Integer Arithmetic Register 2
02		ar3		Integer Arithmetic Register 3
03		ar4		Integer Arithmetic Register 4
04		ar5		Integer Arithmetic Register 5
05		fr1		Floating Point Arithmetic Register 1
06		fr2		Floating Point Arithmetic Register 2
07		fr3		Floating Point Arithmetic Register 3
08		fr4		Floating Point Arithmetic Register 4
09		fr5		Floating Point Arithmetic Register 5
0A		cr1		Carry Register 1
0B		pr1		Integer Argument Register 1
0C		pr2		Integer Argument Register 2
0D		fpr1		Floating Point Argument Register 1
0E		fpr2		Floating Point Argument Register 2
0F		flr1		Flag Register 1


Interrupt	Description
---------------------------
00		Divide by zero
01		Invalid instruction
02		Call ROM function

Example Program
---------------

; Places the ascii character 'a' at 0,0

; Place 60 and 5 (decimal) in registers ar1 and ar2
PUT 60 ar1
PUT 5 ar2

; Add values in both registers, value saved in ar1
ADD ar1 , ar2

; Move value in ar1 to RAM location 1280 (hex)
; This represents the value of the character on the screen at 0,0
MOV ar1 , R500

; Tell the ROM that we want to refresh the screen
PUT 01 , pr1

; Call the ROM function
INT 02



